name: Update PR Tags
env:
  MERGED_TO_BRANCH_TAG: merged-into-dev
  NOT_MERGED_TO_BRANCH_TAG: not-merged-into-dev

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - 'dev'

jobs:
  update_pr_status:
    runs-on: ubuntu-latest
    permissions: write-all


    steps:
      - name: Printing the current context
        uses: actions/github-script@v6
        with:
          script: |
            console.log(context)

      - name: Determine if push is to dev branch
        id: is_dev_branch
        run: echo "::set-output name=is_dev::${{ startsWith(github.ref, 'refs/heads/dev') }}"



      - name: Evaluate tag to add (push to dev)
        if: ${{steps.is_dev_branch.outputs.is_dev == 'true'}}
        uses: actions/github-script@v6
        with:
          script: |
            const commit_sha = context.payload.after;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const {data} = await github.rest.repos.listPullRequestsAssociatedWithCommit({ commit_sha, owner, repo });
            if(data.length == 0){
              console.log("no PR to tag");
              return;
            }
            for(const pr of data){
              try {
                await Promise.all([
                  github.rest.issues.addLabels({
                    issue_number: pr.number,
                    owner,
                    repo,
                    labels: ["${{env.MERGED_TO_BRANCH_TAG}}"]
                  }),
                  github.rest.issues.removeLabel({
                    issue_number: pr.number,
                    owner,
                    repo,
                    name: "${{env.NOT_MERGED_TO_BRANCH_TAG}}"
                  })
                ]);
              } catch(e){
                console.log(e);
              }
            }




      - name: Evaluate tag to add (pr changed)
        if: ${{steps.is_dev_branch.outputs.is_dev != 'true'}}
        uses: actions/github-script@v6
        with:
          script: |
            const prCommit = context.payload.after;
            const prNumber = context.payload.pull_request.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            const devCommits = await github.rest.repos.listCommits({ owner, repo, sha: 'dev' });

            const commitExistsInDev = devCommits.data.some(commit => commit.sha === prCommit);
            console.log(`Out commit: ${prCommit}`)
            console.log(`Commit exists in dev ? ${commitExistsInDev}`)
            try {
              if(commitExistsInDev){
                await Promise.all([
                  github.rest.issues.addLabels({
                    issue_number: prNumber,
                    owner,
                    repo,
                    labels: ["${{env.MERGED_TO_BRANCH_TAG}}"]
                  }),
                  github.rest.issues.removeLabel({
                    issue_number: prNumber,
                    owner,
                    repo,
                    name: "${{env.NOT_MERGED_TO_BRANCH_TAG}}"
                  })
                ]);
              } else {
                console.log("dev commits")
                console.log(devCommits.map(c => c.sha))
                await Promise.all([
                  github.rest.issues.addLabels({
                    issue_number: prNumber,
                    owner,
                    repo,
                    labels: ["${{env.NOT_MERGED_TO_BRANCH_TAG}}"]
                  }),
                  github.rest.issues.removeLabel({
                    issue_number: prNumber,
                    owner,
                    repo,
                    name: "${{env.MERGED_TO_BRANCH_TAG}}"
                  })    
                ]);
              }
            } catch(e){
              console.log(e);
            }

          

    